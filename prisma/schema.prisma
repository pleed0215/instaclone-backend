// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output = "../src/generated"
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String  @unique
  email     String  @unique
  password  String
  bio       String?
  avatar    String?

  /// @onDelete(SET_NULL)
  followers User[]    @relation("FollowRelation", references: [id])

  /// @onDelete(SET_NULL)
  following User[]    @relation("FollowRelation", references: [id])

  /// @onDelete(CASCADE)
  photos    Photo[]
  /// @onDelete(CASCADE)
  likes     Like[]
  /// @onDelete(CASCADE)
  comments  Comment[]
  /// @onDelete(SET_NULL)
  rooms     Room[]
  /// @onDelete(CASCADE)
  messages   Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Photo {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  file      String
  caption   String?
  /// @onDelete(SET_NULL)
  hashtags  HashTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  /// @onDelete(CASCADE)
  likes     Like[]
  /// @onDelete(CASCADE)
  comments  Comment[]
}

model HashTag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  /// @onDelete(SET_NULL)
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo   Photo @relation(fields: [photoId], references: [id])
  photoId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  @@unique([photoId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId Int
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  payload String
}

model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// @onDelete(SET_NULL)
  participants User[]
  /// @onDelete(SET_NULL)
  messages     Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payload String
  isRead  Boolean     @default(false)
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  room    Room   @relation(fields: [roomId], references: [id])
  roomId  Int
}
